-- creating the view
CREATE OR REPLACE VIEW P0605V AS
    SELECT 
        school_code AS "SCHOOL CODE", 
        program_code AS "PROGRAM CODE",
        course_code AS "COURSE CODE",
        credit_hours AS "CREDIT HOURS",
        section_id AS "SECTION ID",
        semester_year AS "SEMESTER YEAR",
        semester_term AS "SEMESTER TERM",
        student_no AS "STUDENT NO",
        first_name || ', ' || last_name AS "STUDENT NAME",
        COALESCE(letter_grade, 'N/G') AS "STUDENT LETTER GRADE"
    FROM
        GL_SCHOOLS 
        JOIN GL_PROGRAMS USING(school_code)
        JOIN GL_COURSES USING(program_code)
        JOIN GL_SECTIONS USING(course_code)
        JOIN GL_SEMESTERS USING(semester_id)
        JOIN GL_ENROLLMENTS USING(section_id)
        JOIN GL_STUDENTS USING(student_no);



CREATE OR REPLACE PROCEDURE course_listing IS

    PROCEDURE get_school_name(p_school_code IN GL_SCHOOLS.school_code%TYPE);
    PROCEDURE get_course_title(p_course_code IN GL_COURSES.course_code%TYPE);
    PROCEDURE get_program_name(p_program_code IN GL_PROGRAMS.program_code%TYPE);
    PROCEDURE print_program_heading;
    PROCEDURE L1_print;
    PROCEDURE L2_print;
    PROCEDURE L3_print;
    PROCEDURE L4_print;

    CURSOR course_cursor IS
    SELECT  *  FROM P0605V
    WHERE "SCHOOL CODE" = 'BU' AND "SEMESTER YEAR" = 2021 AND "SEMESTER TERM" = 'W'
    ORDER BY "PROGRAM CODE", "COURSE CODE";
    course_record course_cursor%ROWTYPE;

    v_school_code GL_SCHOOLS.school_code%TYPE := 'BU';
    v_year GL_SEMESTERS.semester_year%TYPE := 2021;
    v_term GL_SEMESTERS.semester_term%TYPE := 'W';
    
    v_school_name GL_SCHOOLS.school_name%TYPE;
    v_program_name GL_PROGRAMS.program_name%TYPE;
    v_program_code P0605V."PROGRAM CODE"%TYPE;
    v_course_title GL_COURSES.course_title%TYPE;
    v_course_code GL_COURSES.course_code%TYPE;
    v_section GL_SECTIONS.section_id%TYPE;
    v_student_name P0605V."STUDENT NAME"%TYPE;
    v_grade P0605V."STUDENT LETTER GRADE"%TYPE;
    v_student_no GL_STUDENTS.student_no%TYPE;
    v_letter_grade GL_ENROLLMENTS.letter_grade%TYPE;

    v_prev_program_code P0605V."PROGRAM CODE"%TYPE;
    v_prev_course_code GL_COURSES.course_code%TYPE;
    v_prev_section GL_SECTIONS.section_id%TYPE;
    v_prev_student_no GL_STUDENTS.student_no%TYPE;


    e_table_is_empty_exception  EXCEPTION;

    v_student_count NUMBER := 0;
    v_program_count NUMBER := 0;
    v_course_count NUMBER := 0;
    v_section_count NUMBER := 0;
    v_total_count NUMBER := 0;

    v_h1 VARCHAR(100) := 'Course    Section  Student    Grade';
    v_h2 VARCHAR(100) := '------    -------  -------    -----';
    v_h3 VARCHAR(100) := LPAD('-', 80, '-');

    --procedure for initiating the program
    PROCEDURE Initiate IS
    BEGIN
        OPEN course_cursor;
        FETCH course_cursor INTO course_record;
        IF course_cursor%NOTFOUND THEN
            RAISE e_table_is_empty_exception;
        END IF;

        get_school_name(v_school_code);
        DBMS_OUTPUT.PUT_LINE('Grades for school of ' || v_school_name || ' ' || v_term || v_year);
        DBMS_OUTPUT.PUT_LINE('----------------------------------------');
        DBMS_OUTPUT.NEW_LINE;

        v_prev_program_code := course_record."PROGRAM CODE";
        v_prev_course_code := course_record."COURSE CODE";
        v_prev_section := course_record."SECTION ID";
        v_prev_student_no := course_record."STUDENT NO";

        v_program_code := course_record."PROGRAM CODE";
        v_course_code := course_record."COURSE CODE";
        v_section := course_record."SECTION ID";
        v_student_no := course_record."STUDENT NO";
        v_grade := course_record."STUDENT LETTER GRADE";
        v_student_name := course_record."STUDENT NAME";

        get_program_name(v_program_code);
        get_course_title(v_course_code);
        L1_print;
    END Initiate;

    PROCEDURE assign_values IS
    BEGIN
        v_program_code := course_record."PROGRAM CODE";
        v_course_code := course_record."COURSE CODE";
        v_section := course_record."SECTION ID";
        v_student_no := course_record."STUDENT NO";
        v_grade := course_record."STUDENT LETTER GRADE";
        v_student_name := course_record."STUDENT NAME";
        get_program_name(v_program_code);
        get_course_title(v_course_code);
    END;

    PROCEDURE process_details IS
    BEGIN
        CASE
            WHEN course_record."PROGRAM CODE" <> v_prev_program_code THEN
                L1_print();
                v_prev_program_code := course_record."PROGRAM CODE";
            WHEN course_record."COURSE CODE" <> v_prev_course_code THEN
                L2_print();
                v_prev_course_code := course_record."COURSE CODE";
            WHEN course_record."SECTION ID" <> v_prev_section THEN
                L3_print();
                v_prev_section := course_record."SECTION ID";
            WHEN course_record."STUDENT NO" <> v_prev_student_no THEN
                L4_print();
                v_prev_student_no := course_record."STUDENT NO";
            ELSE NULL;
        END CASE;
    END process_details;

    PROCEDURE print_program_heading IS
    BEGIN
        DBMS_OUTPUT.PUT_LINE('Program: ' || v_program_code || ' - ' || v_program_name);
        DBMS_OUTPUT.PUT_LINE(v_h1);
        DBMS_OUTPUT.PUT_LINE(v_h2);
    END print_program_heading;

    

    PROCEDURE L1_print IS
    BEGIN
        print_program_heading();
        DBMS_OUTPUT.PUT_LINE(v_course_code || ' ' || v_course_title || '  ' || v_section || '  ' || v_student_no || ' ' || v_student_name || '  ' || v_grade);
        v_total_count := v_total_count + v_program_count;
        v_program_count := 0;
    END L1_print;

    PROCEDURE L2_print IS
    BEGIN
        DBMS_OUTPUT.PUT_LINE(v_course_code || ' ' || v_course_title || '  ' || v_section || '  ' || v_student_no || ' ' || v_student_name || '  ' || v_grade);
        v_program_count := v_program_count + v_course_count;
        v_course_count := 0;
    END L2_print;

    PROCEDURE L3_print IS
    BEGIN
        v_section_count := v_section_count + v_student_count;
        DBMS_OUTPUT.PUT_LINE(v_section || '  ' || v_student_no || ' ' || v_student_name || '  ' || v_grade);
        v_student_count := 0;
    END L3_print;

    PROCEDURE L4_print IS
    BEGIN
        DBMS_OUTPUT.PUT_LINE(LPAD(v_student_no || ' ' || v_student_name || '  ' || v_grade, 57));
        v_student_count := v_student_count + 1;
    END L4_print;

    -- procedure to get the school name
    PROCEDURE get_school_name(p_school_code IN GL_SCHOOLS.school_code%TYPE) IS
    BEGIN
        SELECT school_name
        into v_school_name
        FROM GL_SCHOOLS
        WHERE school_code = p_school_code;
    END get_school_name;

    -- procedure to get the program name
    PROCEDURE get_program_name(p_program_code IN GL_PROGRAMS.program_code%TYPE) IS
    BEGIN
        SELECT program_name
        into v_program_name
        FROM GL_PROGRAMS
        WHERE program_code = p_program_code;
    END get_program_name;

    --procedure to get the course title
    PROCEDURE get_course_title(p_course_code IN GL_COURSES.course_code%TYPE) IS
        BEGIN
            SELECT course_title
            into v_course_title
            FROM GL_COURSES
            WHERE course_code = p_course_code;
    END get_course_title;
          
    -- main program
    BEGIN
        Initiate();
        LOOP
            assign_values;
            process_details;
            FETCH course_cursor INTO course_record;
                IF course_cursor%NOTFOUND THEN
                    RAISE e_table_is_empty_exception;
                END IF;
            EXIT WHEN course_cursor%NOTFOUND;
        END LOOP;
        close course_cursor;
    EXCEPTION
    WHEN e_table_is_empty_exception THEN
        DBMS_OUTPUT.PUT_LINE('Table is empty.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error code: ' || SQLCODE);
        DBMS_OUTPUT.PUT_LINE('Error message: ' || SQLERRM);

END course_listing;

BEGIN
    course_listing;
END;